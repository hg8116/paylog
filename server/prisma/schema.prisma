// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  name      String
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @default(now())
  expenses Expense[] @relation("UserExpenses")
  members GroupMember[]
  splits ExpenseSplit[]
}

model Group {
  id Int @id @default(autoincrement())
  name String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @default(now())
  expenses Expense[]
  members GroupMember[]
}

model Expense{
  id Int @id @default(autoincrement())
  amount Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @default(now())
  userId Int
  user User @relation(fields: [userId], references: [id], name: "UserExpenses")
  groupId Int
  group Group @relation(fields: [groupId], references: [id])
  splits ExpenseSplit[]
}

model GroupMember{
  id Int @id @default(autoincrement())
  groupId Int
  userId Int
  joinedAt DateTime @default(now())
  user User @relation(fields: [userId], references: [id])
  group Group @relation(fields: [groupId], references: [id])

  @@unique([groupId, userId])
}

model ExpenseSplit{
  id Int @id @default(autoincrement())
  amount Float
  userId Int
  user User @relation(fields: [userId], references: [id])
  expenseId Int
  expense Expense @relation(fields: [expenseId], references: [id])

  @@unique([userId, expenseId])
}
